const gulp = require("gulp");
const replace = require('gulp-replace');
const htmlmin = require('gulp-htmlmin');
const terser = require('gulp-terser');
const cleanCSS = require('gulp-clean-css');
const jsonmin = require('gulp-jsonmin');

const output = 'dst';
mkSrc = (src) => {
    for (let i = 0; i < src.length; i++) {
        src[i] = output + '/' + src[i];
    }
    return src;
}


function move() {
    return gulp.src(['src/**', '!node_modules/**', '!dst/**', '!**/*.bak', '!gulpfile.js', '!package.json', '!yarn.lock', '!README.md'])
        .pipe(gulp.dest(output));
}

function updateServiceWorkers() {
    return gulp.src(mkSrc(['sw.js', 'index.html']))
        .pipe(replace('SERVICE_WORKERS_CACHE_NAME', () => {
            // 生成随机缓存名更新 Service Workers 缓存
            return Math.random().toString(36).slice(-11);
        }))
        .pipe(replace('// SERVICE_WORKERS_INJECT_POINT',
            "('serviceWorker' in navigator) ? navigator.serviceWorker.register('/sw.js') : null;"))
        .pipe(gulp.dest(output));
}

function htmlMinify() {
    return gulp.src(mkSrc(['**/*.html']))
        .pipe(htmlmin({
            includeAutoGeneratedTags: true,
            removeAttributeQuotes: true,
            removeComments: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            sortClassName: true,
            useShortDoctype: true,
            collapseWhitespace: true,
            minifyCSS: true,
            minifyJS: true,
        }))
        .pipe(gulp.dest(output));
}

function cssMinify() {
    return gulp.src(mkSrc(['**/*.css']))
        .pipe(cleanCSS({compatibility: 'ie8'}))
        .pipe(gulp.dest(output));
}

function jsTerser() {
    return gulp.src(mkSrc(['**/*.js']))
        .pipe(terser({
            compress: {
                drop_console: true
            },
        }))
        .pipe(gulp.dest(output));
}



function jsonMinify() {
    return gulp.src(mkSrc(['**/*.json', 'jietodo.webmanifest']))
        .pipe(jsonmin())
        .pipe(gulp.dest(output));
}


exports.default = gulp.series(
    move,
    updateServiceWorkers,
    gulp.parallel(
        htmlMinify,
        cssMinify,
        jsTerser,
        jsonMinify
    )
);