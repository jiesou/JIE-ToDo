const gulp = require("gulp");
const connect = require('gulp-connect');
const replace = require('gulp-replace');
const htmlmin = require('gulp-htmlmin');
const terser = require('gulp-terser');
const cleanCSS = require('gulp-clean-css');
const jsonmin = require('gulp-jsonmin');

const output = 'dst';
const trueSrc = ['src/**', '!node_modules/**', '!dst/**', '!**/*.bak', '!gulpfile.js', '!package.json', '!yarn.lock', '!README.md'];

function move() {
    return gulp.src(trueSrc)
        .pipe(gulp.dest(output));
}

function updateServiceWorkers() {
    return gulp.src('sw.js', { cwd: output })
        .pipe(replace('SERVICE_WORKERS_CACHE_NAME', () => {
            // 生成随机缓存名更新 Service Workers 缓存
            return 'BUILD_' + Math.random().toString(36).slice(-11) + new Date().getTime();
        }))
        // .pipe(replace('// SERVICE_WORKERS_INJECT_POINT',
            // "('serviceWorker' in navigator) ? navigator.serviceWorker.register('/sw.js') : null;"))
        .pipe(gulp.dest(output));
}

function htmlMinify() {
    return gulp.src(['**/*.html'], { cwd: output })
        .pipe(htmlmin({
            includeAutoGeneratedTags: true,
            removeAttributeQuotes: true,
            removeComments: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            sortClassName: true,
            useShortDoctype: true,
            collapseWhitespace: true,
            minifyCSS: true,
            minifyJS: true,
        }))
        .pipe(gulp.dest(output));
}
function cssMinify() {
    return gulp.src(['**/*.css'], { cwd: output })
        .pipe(cleanCSS({compatibility: 'ie8'}))
        .pipe(gulp.dest(output));
}
function jsTerser() {
    return gulp.src(['**/*.js'], { cwd: output })
        .pipe(terser({
            compress: {
                drop_console: true
            },
        }))
        .pipe(gulp.dest(output));
}
function jsonMinify() {
    return gulp.src(['**/*.json', 'jietodo.webmanifest'], { cwd: output })
        .pipe(jsonmin())
        .pipe(gulp.dest(output));
}


exports.default = exports.build = gulp.series(
    move,
    updateServiceWorkers,
    gulp.parallel(
        htmlMinify,
        cssMinify,
        jsTerser,
        jsonMinify
    )
);

function watch() {
    // 增量构建
    return gulp.src(trueSrc, {since: gulp.lastRun(watch)})
        .pipe(gulp.dest(output))
        .pipe(gulp.src('sw.js', {cwd: 'src'}))
        .pipe(replace('SERVICE_WORKERS_CACHE_NAME', () => {
            return 'DEV_' + Math.random().toString(36).slice(-11);
        }))
        .pipe(gulp.dest(output))
        .pipe(connect.reload())
}
exports.watch = () => {
    connect.server({
      root: 'dst',
      port: 3000,
      livereload: true
    });
    gulp.watch(trueSrc, {ignoreInitial: false}, watch);
}
