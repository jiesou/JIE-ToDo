const[refreshTaskList,updateNotification]=(()=>{const t=$("#task-list");function e(t,e,a){a.find('input[type="checkbox"]').attr("checked",!!t.status||null),a.find(".mdui-list-item-title").text(t.title),t.date?a.find(".mdui-list-item-title").next().replaceWith(`<div class="mdui-list-item-text mdui-list-item-one-line">${FormatTime(new Date(t.date))}</div>`):a.find(".mdui-list-item-title").next().replaceWith("<span>"),e.append(a.clone().removeClass("todo-template"))}return[async a=>{t.children("label").remove(),tasks.length?$("#notask").hide():$("#notask").show();const n=$(".todo-group-template"),i=$(".todo-template");tasks.forEach(((a,s)=>{if(!a)return tasks.splice(s,1),void saveTasks();if(a.todos){n.find(".mdui-list-item-content").text(a.title);const o=n.find(".mdui-list");o.children("label").remove(),a.todos.forEach((t=>{e(t,o,i)})),t.append(n.clone().removeClass("todo-group-template")),t.last().find(".mdui-list").sortable({group:{name:"todo-group",put:"todo-root"},filter:"#todo-group-menu",preventOnFilter:!1,animation:150,delay:100,fallbackOnBody:!0,swapThreshold:.65,onAdd:function(t){tasks[s].todos.splice(t.newIndex-1,0,tasks.splice(t.oldIndex-1,1)[0]),saveTasks()},onRemove:function(t){tasks.splice(t.newIndex-1,0,tasks[s].todos.splice(t.oldIndex-1,1)[0]),saveTasks()},onUpdate:function(t){tasks[s].todos.splice(t.newIndex-1,0,tasks[s].todos.splice(t.oldIndex-1,1)[0]),saveTasks()}})}else e(a,t,i)})),$("#task-list input").on("click",(t=>{const e=$(t.target).closest(".mdui-list-item");if(e.parent("#task-list").length){const t=e.index("#task-list > label");task=tasks[t]}else{const t=e.closest(".mdui-collapse-item").index("#task-list > label"),a=e.index(`#task-list > label:nth-of-type(${t+1}) .mdui-list > label`);task=tasks[t].todos[a]}task.status=!task.status,saveTasks()})),!a&&updateNotification()},async()=>{t.children("label").each(((t,e)=>{const a=(e=$(e)).children(".mdui-list");if(a.length){const e=t;a.children("label").each(((t,a)=>{const[n,i]=TimeLeft(tasks[e].todos[t].date,"short");$(a).find("#task-countdown").replaceWith(`<div class="mdui-list-item-title mdui-list-item-one-line mdui-text-color-${n}">${i}</div>`)}))}else{const[a,n]=TimeLeft(tasks[t].date,"short");e.find("#task-countdown").replaceWith(`<div class="mdui-list-item-title mdui-list-item-one-line mdui-text-color-${a}">${n}</div>`)}}));if(!("periodicSync"in await navigator.serviceWorker.ready))return!1;navigator.permissions.query({name:"periodic-background-sync"}).then((t=>{const e="granted"===t.state;navigator.serviceWorker.ready.then((t=>{t.periodicSync.getTags().then((a=>{a.forEach((e=>t.periodicSync.unregister(e))),settings.foregroundNotify=[];for(let a in tasks){if(tasks[a].status||null===tasks[a].notify)continue;const n=JSON.stringify({schedule:tasks[a].date-tasks[a].notify,notification:[lang["notification-remind"],{tag:tasks[a].id,body:lang.prop("time-to-sth",tasks[a].title),icon:"./img/favicon/icon-512.png"}]});settings.foregroundNotify.push(n),e&&t.periodicSync.register(n,{minInterval:6e4})}saveSettings()}))}))}))}]})();let openedMenuTarget;refreshTaskList(!0),lang.wait.push(updateNotification),$("#task-list").sortable({group:{name:"todo-root",put:"todo-group"},filter:"#task-menu",animation:150,delay:100,fallbackOnBody:!0,swapThreshold:.65,onUpdate:function(t){tasks.splice(t.newIndex-1,0,tasks.splice(t.oldIndex-1,1)[0]),saveTasks()}}),$("#todo-group-menu li:nth-child(2) a").on("click",(()=>{})),(t=>{let e=task_date=task_notify_input=task_notify_enable=!1;t.on("open.mdui.dialog",(t=>{let a=date="";"number"==typeof openedMenuTarget?(a=tasks[openedMenuTarget].title,task_dialog.children(".mdui-dialog-title").text(lang.prop("edit-todo",a)),date=tasks[openedMenuTarget].date?new Date(tasks[openedMenuTarget].date-6e4*(new Date).getTimezoneOffset()).toISOString().slice(0,-1):checked="disabled",null!==tasks[openedMenuTarget].notify&&(checked="checked",notify=tasks[openedMenuTarget].notify/6e4,task_notify_enable=!0)):(task_dialog.children(".mdui-dialog-title").text(lang["add-todo"]),checked="disabled"),task_dialog.children(".mdui-dialog-content").html(`\n  <div id="task-title" class="mdui-textfield">\n      <label class="mdui-textfield-a">${lang["todo-things"]}</label>\n      <input type="text" class="mdui-textfield-input" value="${a}">\n  </div>\n  <div id="task-date" class="mdui-textfield">\n      <label class="mdui-textfield-a">${lang["target-time"]+lang.optional}</label>\n      <input type="datetime-local" class="mdui-textfield-input" value="${date}">\n  </div>\n  <label id="task-notify" class="mdui-checkbox">\n      <input type="checkbox" ${checked}/>\n      <i class="mdui-checkbox-icon"></i>\n      <span>${lang["notify-x-minutes-1"]}</span>\n      <div class="mdui-col-xs-3 mdui-textfield">\n          <input class="mdui-textfield-input" type="number" placeholder="0" value="${notify}"/>\n      </div>\n      ${lang["notify-x-minutes-2"]}\n  </label>`),e=task_dialog.find("#task-title > input"),task_date=task_dialog.find("#task-date > input");const n=$("#task-notify");task_notify_checkbox=n.find("input[type='checkbox']"),task_notify_input=n.find("input.mdui-textfield-input"),task_notify_checkbox.on("click",(()=>{task_notify_enable=!task_notify_enable,Notification.requestPermission().then((async t=>{if("serviceWorker"in navigator&&"periodicSync"in await navigator.serviceWorker.ready){const e=await navigator.permissions.query({name:"periodic-background-sync"});"granted"!==t||"granted"!==e.state?mdui.snackbar(lang.prop("notify-not-available",lang["need-installed-and-permission"])):mdui.snackbar(lang["notify-activated"])}else mdui.snackbar(lang.prop("notify-not-available",lang["browser-doest-support"]))}))})),task_date.on("input",(()=>{""!==task_date.val()&&task_notify_checkbox.removeAttr("disabled")})),t._detail.inst.handleUpdate()})),t.on("closed.mdui.dialog",(()=>{task_notify_enable=!1,openedMenuTarget=null}))})($("#todo-group-dialog")),$("#task-list > .mdui-list-item").on("contextmenu",(t=>{const e=$(t.target).closest(".mdui-list-item");if(e.parent(".mdui-collapse-item-body").length)return!1;openedMenuTarget=e.index()-1;const a=$("#task-menu");return $(a.children().get(0)).attr("disabled",(()=>!tasks[openedMenuTarget].date||null)),new mdui.Menu(e,a,{boolean:!1,align:"right"}).open(),!1})),$("#task-menu").on("close.mdui.menu",(()=>openedMenuTarget=null)),$("#task-menu-full").on("click",(()=>{tasks[openedMenuTarget].date?location.href=GotoPath(`/full?task=${openedMenuTarget}`):mdui.snackbar(lang["none-time-fullscreen"])})),$("#task-menu-del").on("click",(()=>{const t=openedMenuTarget,e=tasks[t];tasks.splice(t,1),refreshTaskList(),saveTasks(),mdui.snackbar({message:lang.prop("deleted-sth",e.title),buttonText:lang.undo,onButtonClick:function(){tasks.splice(t,0,e),refreshTaskList(),saveTasks()}})}));const add_task_fabs=$("#add-task-fabs");add_task_fabs.on("opened.mdui.fab",(()=>{add_task_fabs.children().first().attr("mdui-dialog","{target: '#task-dialog', history: false}")})),add_task_fabs.on("closed.mdui.fab",(()=>{add_task_fabs.children().first().removeAttr("mdui-dialog","{target: '#task-dialog', history: false}")})),$("#add-todo-group").on("click",(()=>{const t={title:lang["todo-group"],todos:[],updateTime:(new Date).getTime(),id:GenerationId()};tasks.push(t),saveTasks(),refreshTaskList()}));const task_dialog=$("#task-dialog");let task_title=task_date=task_notify_input=task_notify_enable=!1;task_dialog.on("confirm.mdui.dialog",(()=>{const t=task_title.val();if(t.length<1)return mdui.snackbar(lang["todo-things-cant-none"]),!1;const e={title:t,date:new Date(task_date.val()).getTime(),notify:task_notify_enable&&""!==task_date.val()?6e4*task_notify_input.val()||0:null,updateTime:(new Date).getTime(),id:GenerationId()};openedMenuTarget?(e.status=tasks[openedMenuTarget].status,tasks.splice(openedMenuTarget,1,e)):(e.status=!1,tasks.push(e)),saveTasks(),refreshTaskList()})),task_dialog.on("open.mdui.dialog",(t=>{let e=date=checked=notify="";"number"==typeof openedMenuTarget?(e=tasks[openedMenuTarget].title,task_dialog.children(".mdui-dialog-title").text(lang.prop("edit-todo",e)),date=tasks[openedMenuTarget].date?new Date(tasks[openedMenuTarget].date-6e4*(new Date).getTimezoneOffset()).toISOString().slice(0,-1):checked="disabled",null!==tasks[openedMenuTarget].notify&&(checked="checked",notify=tasks[openedMenuTarget].notify/6e4,task_notify_enable=!0)):(task_dialog.children(".mdui-dialog-title").text(lang["add-todo"]),checked="disabled"),task_dialog.children(".mdui-dialog-content").html(`\n<div id="task-title" class="mdui-textfield">\n    <label class="mdui-textfield-a">${lang["todo-things"]}</label>\n    <input type="text" class="mdui-textfield-input" value="${e}">\n</div>\n<div id="task-date" class="mdui-textfield">\n    <label class="mdui-textfield-a">${lang["target-time"]+lang.optional}</label>\n    <input type="datetime-local" class="mdui-textfield-input" value="${date}">\n</div>\n<label id="task-notify" class="mdui-checkbox">\n    <input type="checkbox" ${checked}/>\n    <i class="mdui-checkbox-icon"></i>\n    <span>${lang["notify-x-minutes-1"]}</span>\n    <div class="mdui-col-xs-3 mdui-textfield">\n        <input class="mdui-textfield-input" type="number" placeholder="0" value="${notify}"/>\n    </div>\n    ${lang["notify-x-minutes-2"]}\n</label>`),task_title=task_dialog.find("#task-title > input"),task_date=task_dialog.find("#task-date > input");const a=$("#task-notify");task_notify_checkbox=a.find("input[type='checkbox']"),task_notify_input=a.find("input.mdui-textfield-input"),task_notify_checkbox.on("click",(()=>{task_notify_enable=!task_notify_enable,Notification.requestPermission().then((async t=>{if("serviceWorker"in navigator&&"periodicSync"in await navigator.serviceWorker.ready){const e=await navigator.permissions.query({name:"periodic-background-sync"});"granted"!==t||"granted"!==e.state?mdui.snackbar(lang.prop("notify-not-available",lang["need-installed-and-permission"])):mdui.snackbar(lang["notify-activated"])}else mdui.snackbar(lang.prop("notify-not-available",lang["browser-doest-support"]))}))})),task_date.on("input",(()=>{""!==task_date.val()&&task_notify_checkbox.removeAttr("disabled")})),t._detail.inst.handleUpdate()})),task_dialog.on("closed.mdui.dialog",(()=>{task_notify_enable=!1,openedMenuTarget=null})),(t=>{const e=t.find(".auto-fullscreen");settings.autoFullscreen&&(null===new URL(location.href).searchParams.get("nofullscreen")&&tasks[0]&&tasks[0].date&&(location.href=GotoPath("/full?task=0&autofullscreen")),e.attr("checked",!0)),e.on("click",(()=>{settings.autoFullscreen=!settings.autoFullscreen,saveSettings()}));const a=$(".multi-storage");var n;settings.multiStorage&&a.attr("checked",!0),a.on("click",(()=>{DeleteData(!0),settings.multiStorage=!settings.multiStorage,saveSettings()})),(n=t.find(".import-export-actions").children()).eq(0).on("click",(()=>{SaveFile(`JIE-ToDo_tasks-${FormatTime()}.json`,new Blob([window.localStorage.getItem("tasks")||"[]"],{type:"text/plain;charset=utf-8"}))})),n.eq(1).on("click",(()=>{ReadFile((t=>{const e=[...tasks];let a=0;tasks.length?[a,tasks]=MergeData("tasks",JSON.parse(t),tasks,!0):(tasks=JSON.parse(t),a=tasks.length),refreshTaskList(),saveTasks(),mdui.snackbar({message:lang.prop("merge-imported-many",a),buttonText:lang.undo,onButtonClick:function(){tasks=e,refreshTaskList(),saveTasks()}})}))})),n.eq(2).on("click",(()=>{ReadFile((t=>{const e=()=>{const e=[...tasks];tasks=JSON.parse(t),refreshTaskList(),saveTasks(),mdui.snackbar({message:lang.prop("override-imported-many",tasks.length),buttonText:lang.undo,onButtonClick:function(){tasks=e,refreshTaskList(),saveTasks()}})};tasks.length?mdui.snackbar({message:lang["override-import-warn"],buttonText:lang.confirm,timeout:0,onButtonClick:e}):e()}))})),t.find(".clear-data").on("click",(()=>{mdui.snackbar({message:lang["clear-all-data-warn"],buttonText:lang.confirm,onButtonClick:DeleteData})}))})($("#settings-dialog"));